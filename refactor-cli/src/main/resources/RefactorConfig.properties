#maxParallel=4
#maxLinesPerChunk=300
#maxPromptRetries=3
#cacheEnabled=true
#openAiApiKey=k-
## We store the entire verbose prompt in one property, using \n for newlines.
##basePrompt=You are an **expert** in Java, Spring Boot, **Hexagonal Architecture**, and **advanced DDD** frameworks.\n\nWe have a special **DDD Framework** that defines:\n1) Aggregates must extend `AbstractAggregate<ID>` from our framework.\n2) Command handlers in Aggregates use `@CommandHandler`.\n3) Domain logic (invariants, rules) stays inside aggregates or domain services.\n4) Repositories are interfaces (like `AggregateRepository` or `CrudAggregateRepository`)?no domain logic inside them.\n5) Outbox / EventRecord creation is handled by the framework automatically; direct DB calls in the domain are not allowed.\n6) Saga / compensation logic is in the application layer, using `SagaManager`, `@SagaEventHandler`, `@Saga`.\n   No domain or repository calls for saga compensation.\n7) For concurrency, we rely on `SingleUpdateService.updateWithRetry(...)` or the advanced `CommandBus` with interceptors.\n8) The **hexagonal** rules still apply (Domain ? Application ? Adapters; domain cannot call DB or external services).\n\n**Your task**:\n- Analyze the provided Java **legacy** code chunk for violations of these rules.\n- If domain logic is found in a repository, or direct DB calls from an entity, that is a violation.\n- Move domain invariants to aggregator methods annotated with `@CommandHandler`.\n- Move DB code to the adapter layer or use the framework?s `AggregateRepository`.\n- If there's saga logic in the domain, move it to a `@Saga` class with `@SagaEventHandler`.\n- Provide concurrency hints via `SingleUpdateService` or the advanced `CommandBus` if needed.\n- Return **only** valid JSON with:\n  {\n    \"violation\": true|false,\n    \"reason\": \"...\",\n    \"suggestedFix\": \"...\"\n  }\n- In \"suggestedFix\", show the **refactored** code using:\n  - `AbstractAggregate` for domain logic\n  - `@CommandHandler` for commands\n  - Repositories with no domain logic\n  - Saga logic in separate `@Saga` classes if needed\n  - Delegation to the framework for concurrency or outbox\n\nAfter your analysis, show the updates in \"suggestedFix\", ensuring we have final aggregator classes, repository classes, or saga classes as needed.\n\n=== CODE CHUNK ===\n
#
##basePrompt=You are an **expert** in Java, Spring Boot, **Hexagonal Architecture**, and **advanced DDD** frameworks.\n\nWe have a special **DDD Framework** that defines:\n1) Aggregates must extend `AbstractAggregate<ID>` from our framework.\n2) Command handlers in Aggregates use `@CommandHandler`.\n3) Domain logic (invariants, rules) stays inside aggregates or domain services.\n4) Repositories are interfaces (like `AggregateRepository` or `CrudAggregateRepository`)?no domain logic inside them.\n5) Outbox / EventRecord creation is handled by the framework automatically; direct DB calls in the domain are not allowed.\n6) Saga / compensation logic is in the application layer, using `SagaManager`, `@SagaEventHandler`, `@Saga`.\n   No domain or repository calls for saga compensation.\n7) For concurrency, we rely on `SingleUpdateService.updateWithRetry(...)` or the advanced `CommandBus` with interceptors.\n8) The **hexagonal** rules still apply (Domain ? Application ? Adapters; domain cannot call DB or external services).\n\n**Your task**:\n- Analyze the provided Java **legacy** code chunk for violations of these rules.\n- If domain logic is found in a repository, or direct DB calls from an entity, that is a violation.\n- Move domain invariants to aggregator methods annotated with `@CommandHandler`.\n- Move DB code to the adapter layer or use the framework?s `AggregateRepository`.\n- If there's saga logic in the domain, move it to a `@Saga` class with `@SagaEventHandler`.\n- Provide concurrency hints via `SingleUpdateService` or the advanced `CommandBus` if needed.\n- Return **only** valid JSON with:\n  {\n    \"violation\": true|false,\n    \"reason\": \"...\",\n    \"suggestedFix\": \"...\"\n  }\n- In \"suggestedFix\", show the **refactored** code using:\n  - `AbstractAggregate` for domain logic\n  - `@CommandHandler` for commands\n  - Repositories with no domain logic\n  - Saga logic in separate `@Saga` classes if needed\n  - Delegation to the framework for concurrency or outbox\n\nAfter your analysis, show the updates in \"suggestedFix\", ensuring we have final aggregator classes, repository classes, or saga classes as needed.\n\n=== CODE CHUNK ===\n
## We store the entire verbose prompt in one property, using \n for newlines.
#basePrompt=You are an **expert** in Java, Spring Boot, **Hexagonal Architecture**, and **advanced DDD** frameworks.\n\nWe have a special **DDD Framework** that defines:\n1) Aggregates must extend `AbstractAggregate<ID>` from our framework.\n2) Command handlers in Aggregates use `@CommandHandler`.\n3) Domain logic (invariants, rules) stays inside aggregates or domain services.\n4) Repositories are interfaces (like `AggregateRepository` or `CrudAggregateRepository`)?no domain logic inside them.\n5) Outbox / EventRecord creation is handled by the framework automatically; direct DB calls in the domain are not allowed.\n6) Saga / compensation logic is in the application layer, using `SagaManager`, `@SagaEventHandler`, `@Saga`.\n   No domain or repository calls for saga compensation.\n7) For concurrency, we rely on `SingleUpdateService.updateWithRetry(...)` or the advanced `CommandBus` with interceptors.\n8) The **hexagonal** rules still apply (Domain ? Application ? Adapters; domain cannot call DB or external services).\n\n**Your task**:\n- Analyze the provided Java **legacy** code chunk for violations of these rules.\n- If domain logic is found in a repository, or direct DB calls from an entity, that is a violation.\n- Move domain invariants to aggregator methods annotated with `@CommandHandler`.\n- Move DB code to the adapter layer or use the framework?s `AggregateRepository`.\n- If there's saga logic in the domain, move it to a `@Saga` class with `@SagaEventHandler`.\n- Provide concurrency hints via `SingleUpdateService` or the advanced `CommandBus` if needed.\n\n**IMPORTANT**:\n1) You must return **exactly one** JSON object of the form:\n   {\n     \"violation\": true|false,\n     \"reason\": \"...\",\n     \"suggestedFix\": \"...\"\n   }\n2) If there is **no violation**, set `\"violation\": false` and `\"suggestedFix\": \"\"`.\n3) If violation=true, the `\"suggestedFix\"` must be **entirely valid Java code** with no extra commentary (no bullet points, no lines like \"Code snippet:\", etc.). Use **only ASCII quotes** (no curly quotes) and ensure it can be parsed by JavaParser.\n4) Do **not** wrap code in triple backticks, do not use enumerations or bullet points. Just provide the final `.java` source.\n5) Provide the updated aggregator classes, repository classes, or saga classes as needed, referencing our DDD framework rules.\n\nFinally, output only that JSON?nothing else.\n\n=== CODE CHUNK ===\n

maxParallel=4
maxLinesPerChunk=300
maxPromptRetries=3
cacheEnabled=true

  # We store the entire verbose prompt in one property, using \n for newlines.
basePrompt=You are an **expert** in Java, Spring Boot, **Hexagonal Architecture**, and **advanced DDD** frameworks.\n\nWe have a special **DDD Framework** that defines:\n1) Aggregates must extend `AbstractAggregate<ID>` from our framework.\n2) Command handlers in Aggregates use `@CommandHandler`.\n3) Domain logic (invariants, rules) stays inside aggregates or domain services.\n4) Repositories are interfaces (like `AggregateRepository` or `CrudAggregateRepository`)?no domain logic inside them.\n5) Outbox / EventRecord creation is handled by the framework automatically; direct DB calls in the domain are not allowed.\n6) Saga / compensation logic is in the application layer, using `SagaManager`, `@SagaEventHandler`, `@Saga`.\n   No domain or repository calls for saga compensation.\n7) For concurrency, we rely on `SingleUpdateService.updateWithRetry(...)` or the advanced `CommandBus` with interceptors.\n8) The **hexagonal** rules still apply (Domain ? Application ? Adapters; domain cannot call DB or external services).\n\n**Your task**:\n- Analyze the provided Java **legacy** code chunk for violations of these rules.\n- If domain logic is found in a repository, or direct DB calls from an entity, that is a violation.\n- Move domain invariants to aggregator methods annotated with `@CommandHandler`.\n- Move DB code to the adapter layer or use the framework?s `AggregateRepository`.\n- If there's saga logic in the domain, move it to a `@Saga` class with `@SagaEventHandler`.\n- Provide concurrency hints via `SingleUpdateService` or the advanced `CommandBus` if needed.\n\n**IMPORTANT**:\n1) You must return **exactly one** JSON object of the form:\n   {\n     \"violation\": true|false,\n     \"reason\": \"...\",\n     \"suggestedFix\": \"...\"\n   }\n2) If there is **no violation**, set `\"violation\": false` and `\"suggestedFix\": \"\"`.\n3) If violation=true, the `\"suggestedFix\"` must be **entirely valid Java code** with no extra commentary (no bullet points, no lines like \"Code snippet:\", etc.). Use **only ASCII quotes** (no curly quotes) and ensure it can be parsed by JavaParser.\n4) Do **not** wrap code in triple backticks, do not use enumerations or bullet points. Just provide the final `.java` source.\n5) Provide the updated aggregator classes, repository classes, or saga classes as needed, referencing our DDD framework rules.\n\nFinally, output only that JSON?nothing else.\n\n=== CODE CHUNK ===\n

# RAG settings
rag.enabled=true
rag.maxResults=5
rag.relevanceThreshold=0.7
rag.includeCitations=true
rag.useForContext=true
rag.indexCodeSnippets=true
rag.documentStoragePath=./rag_documents
rag.chunkSize=1000
rag.chunkOverlap=200
rag.domainContextPath=./domain_examples

# Vector DB settings (Pinecone or in-memory)
vectordb.provider=inmemory

# Embedding service settings
embedding.provider=openai
embedding.openai.model=text-embedding-ada-002
embedding.openai.apiUrl=https://api.openai.com/v1/embeddings
embedding.openai.batchSize=20
embedding.openai.dimension=1536

# Default domain context snippet (used if RAG is disabled)
domain.default.snippet=package com.example.ddd;\n\
\n\
public abstract class AbstractAggregate<ID> {\n\
   protected ID id;\n\
   public ID getId() { return id; }\n\
}\n\
\n\
@interface CommandHandler {}\n\
\n\
/**\n\
 * Domain objects should never call infrastructure directly.\n\
 * Use repository interfaces in the domain layer that are\n\
 * implemented by the infrastructure layer.\n\
 */\n\
public interface Repository<T, ID> {\n\
    T findById(ID id);\n\
    void save(T entity);\n\
}\n\
\n\
/**\n\
 * Domain logic should be encapsulated within the domain objects\n\
 * and not leak into repositories or services.\n\
 */\n\
public interface DomainEventPublisher {\n\
    void publish(DomainEvent event);\n\
}\n\
\n\
public interface DomainEvent {}\n